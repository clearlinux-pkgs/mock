From 9f564b366248567c65bb5df989b6707f96b34be7 Mon Sep 17 00:00:00 2001
From: Thiago Macieira <thiago.macieira@intel.com>
Date: Tue, 3 Jul 2018 16:38:40 -0700
Subject: [PATCH 7/7] Fix systemd-nspawn use

For some reason I don't undersand (and don't have time to investigate
and learn), sometimes the arguments passed to the "do" function are a
string, sometimes they are a list, and one time it is a list containing
a single string. The _prepare_nspawn_command function tried to deal with
that but failed. This commit tries to work around that.

Plus it passes the environment to systemd-nspawn in -E arguments, which
was missing.

Signed-off-by: Thiago Macieira <thiago.macieira@intel.com>
---
 py/mockbuild/util.py | 25 ++++++++++++++-----------
 1 file changed, 14 insertions(+), 11 deletions(-)

diff --git a/py/mockbuild/util.py b/py/mockbuild/util.py
index e704416..3ac5a4e 100644
--- a/py/mockbuild/util.py
+++ b/py/mockbuild/util.py
@@ -470,7 +470,12 @@ def do(command, shell=False, chrootPath=None, cwd=None, timeout=0, raiseExc=True
             command = ['/bin/sh', '-c'] + command
             shell = False
         if chrootPath and USE_NSPAWN:
-            command = _prepare_nspawn_command(chrootPath, user, command, private_network=private_network)
+            if isinstance(command, list):
+                if len(command) == 1:
+                    command = command[0].split(' ')
+                    while '' in command:
+                        command.remove('')
+            command = _prepare_nspawn_command(chrootPath, user, command, private_network=private_network, env=env)
         logger.debug("Executing command: {0} with env {1} and shell {2}".format(command, env, shell))
         child = subprocess.Popen(
             command,
@@ -564,19 +569,17 @@ def is_in_dir(path, directory):
 
     return os.path.commonprefix([path, directory]) == directory
 
-def _prepare_nspawn_command(chrootPath, user, cmd, private_network=False):
+def _prepare_nspawn_command(chrootPath, user, cmd, private_network=False, env={}):
     cmd_is_list = isinstance(cmd, list)
-    if user:
-        # needs to be /bin because of el5 and el6 targets
-        if cmd_is_list:
-            cmd = ['/bin/su', '-l', user, '-c', '{0}'.format(" ".join(cmd))]
-        else:
-            cmd = ['/bin/su', '-l', user, '-c', '"{0}"'.format(cmd)]
-    elif not cmd_is_list:
-        cmd = [ cmd, ]
+    if not cmd_is_list:
+        cmd = [ '/bin/sh', '-c','"' + cmd + '"' ]
     nspawn_argv = ['/usr/bin/systemd-nspawn', '-q', '-M' , uuid.uuid4().hex, '-D', chrootPath]
+    for key, value in env.items():
+        nspawn_argv.append('-E' + key + '=' + value)
     if private_network:
         nspawn_argv.append('--private-network')
+    if user:
+        nspawn_argv.append('--user=' + user)
     cmd = nspawn_argv + cmd
     if cmd_is_list:
         return cmd
@@ -601,7 +604,7 @@ def doshell(chrootPath=None, environ=None, uid=None, gid=None, user=None, cmd=No
     else:
         cmd = ["/bin/sh", "-i", "-l"]
     if USE_NSPAWN:
-        cmd = _prepare_nspawn_command(chrootPath, user, cmd)
+        cmd = _prepare_nspawn_command(chrootPath, user, cmd, env=environ)
     preexec = ChildPreExec(personality=None, chrootPath=chrootPath, cwd=None,
                            uid=uid, gid=gid, env=environ, shell=True,
                            unshare_ipc=unshare_ipc)
-- 
2.18.0

